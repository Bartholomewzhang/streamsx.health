namespace com.ibm.streamsx.health.analyze.nlp.services ;

use com.ibm.streamsx.nlp::UimaText ;
use com.ibm.streamsx.health.analyze.nlp.casparser::SymptomDiseaseParser ;
use com.ibm.streamsx.topology.topic::Subscribe ;
use com.ibm.streamsx.health.ingest.connector::IngestSubscribe ;
use com.ibm.streamsx.health.ingest.types::Observation ;
use com.ibm.streamsx.topology.topic::Publish ;
use com.ibm.streamsx.json::TupleToJSON ;
type AnnoSpan = tuple<rstring text, int32 begin, int32 end, rstring modality,
	rstring icd10Code> ;

composite AnnotateDiseaseService
{
	graph
		(stream<rstring result, list<AnnoSpan> annotations> UimaText_2_out0) as
			UimaText_2 = UimaText(Functor_8_out0)
		{
			param
				pearFile : "symptomDisease.pear" ;
				casOut : "result" ;
				outputAttributes : "annotations" ;
				inputDoc : "valueString" ;
		}

		() as Custom_3 = Custom(UimaText_2_out0)
		{
			logic
				onTuple UimaText_2_out0 :
				{
					println(UimaText_2_out0.result) ;
				}

		}

		(stream<rstring result> Functor_5_out0) as Functor_5 =
			Functor(UimaText_2_out0)
		{
		}

		(stream<SymptomDiseaseParser.SymptomDisease> SymptomDiseaseParser_6_out0) as
			SymptomDiseaseParser_6 = SymptomDiseaseParser(Functor_5_out0)
		{
		}

		(stream<Observation> IngestSubscribe_7_out0) as IngestSubscribe_7 =
			IngestSubscribe()
		{
			param
				topic : "com/ibm/streamsx/health/simulate/clinicalnotes/observations/v1" ;
		}

		(stream<rstring patientId, rstring valueString> Functor_8_out0) as
			Functor_8 = Functor(IngestSubscribe_7_out0)
		{
			output
				Functor_8_out0 : patientId = patientId, valueString = reading.valueString ;
		}

		() as Publish_8 = Publish(TupleToJSON_9_out0)
		{
			param
				topic : "com/ibm/streamsx/health/analyze/nlp/services/annotateDiseaseService/diseases/v1" ;
		}

		(stream<rstring jsonString> TupleToJSON_9_out0) as TupleToJSON_9 =
			TupleToJSON(SymptomDiseaseParser_6_out0)
		{
		}

}

