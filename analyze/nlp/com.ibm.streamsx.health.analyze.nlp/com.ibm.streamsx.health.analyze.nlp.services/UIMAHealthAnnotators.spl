namespace com.ibm.streamsx.health.analyze.nlp.services ;

use com.ibm.streamsx.nlp::UimaText ;
use com.ibm.streamsx.health.analyze.nlp.casparser::SymptomDiseaseParser ;
type AnnoSpan = tuple<rstring text, int32 begin, int32 end, rstring modality,
	rstring icd10Code> ;

composite AnnotateDiseaseService
{
	graph
		(stream<rstring inputText> Beacon_1_out0) as Beacon_1 = Beacon()
		{
			param
				period : 1.0 ;
			output
				Beacon_1_out0 : inputText =
					"Patient has a headache, A Fib. Patient does not have any bruises. It is unclear if they have an infection. "
					+
					"Advil should be prescribed. If that doesn't work, give them morphine." ;
		}

		(stream<rstring result, list<AnnoSpan> annotations> UimaText_2_out0) as
			UimaText_2 = UimaText(Beacon_1_out0)
		{
			param
				pearFile : "symptomDisease.pear" ;
				casOut : "result" ;
				outputAttributes : "annotations" ;
		}

		() as Custom_3 = Custom(UimaText_2_out0)
		{
			logic
				onTuple UimaText_2_out0 :
				{
					println(UimaText_2_out0.result) ;
				}

		}

		() as FileSink_4 = FileSink(SymptomDiseaseParser_6_out0 as inPort0Alias)
		{
			param
				file : "result.txt" ;
				flush : 1u ;
		}

		(stream<rstring result> Functor_5_out0) as Functor_5 =
			Functor(UimaText_2_out0)
		{
		}

		(stream<SymptomDiseaseParser.SymptomDisease> SymptomDiseaseParser_6_out0) as
			SymptomDiseaseParser_6 = SymptomDiseaseParser(Functor_5_out0)
		{
		}

}

