// begin_generated_IBM_copyright_prolog                                       
//                                                                            
// This is an automatically generated copyright prolog.                       
// After initializing,  DO NOT MODIFY OR MOVE                                 
//****************************************************************************
// Copyright (C) 2016 International Business Machines Corporation             
// All Rights Reserved                                                        
//****************************************************************************
// end_generated_IBM_copyright_prolog                

namespace com.ibm.streamsx.health.analyze.vital ;

use com.ibm.streamsx.health.ingest.connector::IngestSubscribe ;
use com.ibm.streamsx.health.ingest.types::* ;
use com.ibm.streamsx.health.analyze.vital.generated::HealthRules ;
use com.ibm.streamsx.health.analyze.vital.generated.demo::Patient ;
use com.ibm.streamsx.topology.topic::Publish ;
use com.ibm.streamsx.json::TupleToJSON ;

rstring getPatientId(set<rstring> ids)
{
	for(rstring id in ids)
	{
		return id ;
	}

	return "unknown" ;
}

Patient newPatient()
{
	mutable Patient patient = { } ;
	patient.age = 18 ;
	patient.bpDiastolic = 80 ;
	patient.bpSystolic = 120 ;
	patient.heartRate =(float32) 70 ;
	patient.spO2 = 95 ;
	patient.temperature =(float32) 98.6 ;
	return patient ;
}

Patient populate(mutable Patient patient, Observation_T reading)
{
	if(reading.reading.readingType == "HR")
	{
		patient.heartRate =(float32) reading.reading.value ;
	}

	if(reading.reading.readingType == "ABPsys")
	{
		patient.bpSystolic =(int32) reading.reading.value ;
	}

	if(reading.reading.readingType == "ABPdias")
	{
		patient.bpDiastolic =(int32) reading.reading.value ;
	}

	if(reading.reading.readingType == "Temperature")
	{
		patient.temperature =(float32) reading.reading.value ;
	}

	if(reading.reading.readingType == "SpO2")
	{
		patient.spO2 =(int32) reading.reading.value ;
	}

	return patient ;
}

composite VitalRangeCheckService
{
	graph
		(stream<Observation_T> Readings) as IngestSubscribe_1 = IngestSubscribe()
		{
			param
				topic : getSubmissionTimeValue("ingestTopic","ingest-beacon") ;
		}

		(stream<Patient o_Patient> HealthRules_2_out0) as HealthRules_2 =
			HealthRules(Custom_3_out0)
		{
		}

		(stream<Patient i_Patient> Custom_3_out0) as Custom_3 = Custom(Readings)
		{
			logic
				state :
				{
					mutable map<rstring, Patient> patientMap = { } ;
				}

				onTuple Readings :
				{
					rstring patientId = getPatientId(Readings.patientId) ;
					if(has(patientMap, patientId) == false)
					{
						mutable Patient p = newPatient() ;
						p.name =(ustring) patientId ;
						populate(p, Readings) ;
						submit(p, 0u) ;
					}

					else
					{
						mutable Patient p = patientMap [ patientId ] ;
						populate(p, Readings) ;
						submit(p, 0u) ;
					}

				}

		}

		() as Publish_4 = Publish(TupleToJSON_6_out0)
		{
			param
				topic : "analyze.vitalcheck" ;
		}

		(stream<ustring patientId, boolean alert, list<ustring> messages>
			Functor_5_out0) as Functor_5 = Functor(HealthRules_2_out0)
		{
			output
				Functor_5_out0 : patientId = HealthRules_2_out0.o_Patient.name, alert =
					HealthRules_2_out0.o_Patient.alert, messages =
					HealthRules_2_out0.o_Patient.messages ;
		}

		(stream<rstring jsonStr> TupleToJSON_6_out0) as TupleToJSON_6 =
			TupleToJSON(Functor_5_out0)
		{
		}

}

