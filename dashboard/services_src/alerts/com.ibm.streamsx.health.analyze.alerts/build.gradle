apply plugin: 'java'
apply plugin: 'eclipse'
apply from: "../../../../common.gradle"

def STREAMS_INSTALL = System.getenv("STREAMS_INSTALL")
def topologyToolkitPath = "$rootDir/opt/streamsx.topology/com.ibm.streamsx.topology"
def jsonToolkitPath = STREAMS_INSTALL + '/toolkits/com.ibm.streamsx.json'

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: System.getenv("STREAMS_INSTALL") + '/lib', include: ['*.jar'])
    compile group: 'biz.paluch.redis', name: 'lettuce', version: '4.3.3.Final'
    compile group: 'org.jeasy', name: 'easy-rules-core', version: '3.0.0'
    compile group: 'com.google.guava', name: 'guava', version: '23.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.1'
    compile files(System.getenv("STREAMS_INSTALL") + '/toolkits/com.ibm.streamsx.topology/lib/com.ibm.streamsx.topology.jar')
    compile project(':dashboard:services_src:patientcontrolplane:com.ibm.streamsx.health.control.patientcontrolplane')
    compile project(':ingest:common:com.ibm.streamsx.health.ingest')
    testCompile 'junit:junit:4.12'
}

sourceSets {
    main {
        java {
            srcDirs = ['impl/java/src']
        }
    }
}

libsDirName = '../lib'

task buildToolkit {
    doLast {
        splMakeToolkit()
    }
}

task cleanToolkit {
    doLast {
        splCleanToolkit()
    }   
}

def copyPCPLib() {
    copy {
        from '../../services_src/patientcontrolplane/com.ibm.streamsx.health.control.patientcontrolplane/impl/lib/com.ibm.streamsx.health.control.patientcontrolplane.jar'
        into 'opt/downloaded/'
    }
}

def copyCompileDeps() {
	copy {
		into "opt/downloaded"
		from configurations.runtime
		exclude '*streams*'
	}
}

task copyDeps() {
    doLast {
        copyPCPLib()
		copyCompileDeps()
    }
}

task buildPCPToolkit(type: GradleBuild) {
    buildFile = '../../patientcontrolplane/com.ibm.streamsx.health.control.patientcontrolplane/build.gradle'
    tasks = ['build']
}

task buildServices(dependsOn: ['build', ':ingest:common:com.ibm.streamsx.health.ingest:buildToolkit', ':dashboard:services_src:patientcontrolplane:com.ibm.streamsx.health.control.patientcontrolplane:buildToolkit']) {
    doLast {
        def serviceToolkitPath = "${project(':ingest:common:com.ibm.streamsx.health.ingest').projectDir}" + ':' + topologyToolkitPath + ':' + jsonToolkitPath + ':' + "${project(':dashboard:services_src:patientcontrolplane:com.ibm.streamsx.health.control.patientcontrolplane').projectDir}"
        compileApp('com.ibm.streamsx.health.analytics.alerts.services', 'PatientAlertsService', serviceToolkitPath) 
    }   
}


task deleteDeps(type: Delete) {
    delete 'lib'
    delete 'output'
    delete 'com.ibm.streamsx.health.ingest.types.resolver'
}

build.dependsOn buildToolkit
build.finalizedBy buildServices, copyDeps
clean.dependsOn deleteDeps, cleanToolkit
