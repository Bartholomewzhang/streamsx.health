namespace com.ibm.streamsx.health.analytics.alerts.services ;

use com.ibm.streamsx.health.analyze.alerts::VitalAlert ;
use com.ibm.streamsx.health.control.patientcontrolplane::PatientControlPlane ;
use com.ibm.streamsx.health.analyze.alerts::VitalAlertSink ;
use com.ibm.streamsx.health.ingest.types::* ;
use com.ibm.streamsx.health.ingest.connector::IngestSubscribe ;

//type VitalData = rstring patientId, rstring wardId, int64 epochSeconds, map<rstring,
//    float64> vitalsMap ;
type Alert = Observation, tuple<rstring alert> ;

composite PatientAlertsService
{
	graph
		(stream<Alert> VitalAlert_2_out0) as VitalAlert_2 =
			VitalAlert(IngestSubscribe_4_out0 as Beacon_1_out0)
		{
			logic
				onTuple Beacon_1_out0 :
				{
					println(Beacon_1_out0) ;
				}
				//            param
				//                vmArg : "-agentlib:jdwp=transport=dt_socket,suspend=n,server=y,address=localhost:7777" ;

		}

		() as VitalAlertSink_4 = VitalAlertSink(VitalAlert_2_out0)
		{
		}

		(stream<Observation> IngestSubscribe_4_out0) as IngestSubscribe_4 =
			IngestSubscribe()
		{
			param
				topic : getSubmissionTimeValue("topic") ;
		}

}

composite PatientAlertsServiceWithPCP
{
	graph
		(stream<Alert> VitalAlert_2_out0) as VitalAlert_2 =
			VitalAlert(IngestSubscribe_4_out0 as Beacon_1_out0)
		{
			logic
				onTuple Beacon_1_out0 :
				{
					println(Beacon_1_out0) ;
				}

		}

		() as PatientControlPlane_4 = PatientControlPlane()
		{
			param
				serviceName : "PatientAlertsService" ;
				serviceType : "app" ;
		}

		() as VitalAlertSink_4 = VitalAlertSink(VitalAlert_2_out0)
		{
		}

		(stream<Observation> IngestSubscribe_4_out0) as IngestSubscribe_4 =
			IngestSubscribe()
		{
			param
				topic : getSubmissionTimeValue("topic") ;
		}

}


